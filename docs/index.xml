<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes</title>
    <link>http://notes.gbojinov.xyz/</link>
    <description>Recent content on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Feb 2021 00:00:00 +0200</lastBuildDate><atom:link href="http://notes.gbojinov.xyz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Achieving totality in functions</title>
      <link>http://notes.gbojinov.xyz/timeline/20210228225209-achieving-totality-in-functions/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210228225209-achieving-totality-in-functions/</guid>
      <description>Note This pertains to Haskell, but the concepts are valid in any functional language.
How to achieve totality? Common patterns:
 Using a default value, e.g. something like mempty of Monoid Using Maybe, Either, Validation, These, which are effects to model situations like these Restricting input types (e.g. NonEmpty, or newtypes / refinement types) Make abstractions smaller (example: don&amp;rsquo;t define typeclass instances for types where some of the methods might be partial - Num and Natural typeclass for example, as Num has negative values as well) Compiler warnings, static analysers, program verification (a bit more specific to FP languages and Haskell) Dependent types (types that depend on values) - allows you to pass in requirements for types at the type levels (e.</description>
    </item>
    
    <item>
      <title>Given and Using Clauses in Scala 3</title>
      <link>http://notes.gbojinov.xyz/timeline/20210228222135-given-and-using-clauses-in-scala-3/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210228222135-given-and-using-clauses-in-scala-3/</guid>
      <description>Notes Givens in Scala 3 as behaviours injected into functions
Givens in Scala 3 as proofs of existence of types
Other random facts about givens:
To import givens:
object Givens { given personOrdering as Ordering[Person] { ??? } } import Givens.personOrdering import Givens.{given Ordering[Person]} import Givens.{given _} Givens can be &amp;ldquo;derived&amp;rdquo; (as this is not the same as deriving in Haskell for example, where instances are defined automatically). Here it means, when you have a higher kinded type like Ordering[T] for example, you can write an instance for Ordering[Option[T]] using the first instance.</description>
    </item>
    
    <item>
      <title>Givens in Scala 3 as behaviours injected into functions</title>
      <link>http://notes.gbojinov.xyz/timeline/20210228223015-givens-in-scala-3-as-behaviours-injected-into-functions/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210228223015-givens-in-scala-3-as-behaviours-injected-into-functions/</guid>
      <description>Note What is the use case of givens in Scala 3? They are a replacement for implicits, avoiding to explicitly have to pass instances used at call site. Given is well named - it is considered a &amp;ldquo;given&amp;rdquo; to the function. We don&amp;rsquo;t instantiate it as we do with implicits, but rather automatically creates instances to be injected in the function at call site.
An example of a given instance that defines an ordering behaviour for a custom type Person:</description>
    </item>
    
    <item>
      <title>Givens in Scala 3 as proofs of existence of types</title>
      <link>http://notes.gbojinov.xyz/timeline/20210228223600-givens-in-scala-3-as-proofs-of-existence-of-types/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210228223600-givens-in-scala-3-as-proofs-of-existence-of-types/</guid>
      <description>Note From the point of view of Type level programming, a given proves the existence of a type - e.g. the compiler can prove the existence of types, and then create new given instances using those types. This can be used for computations at compile time. (e.g. for a type level sum for example)
A given is conceptually constructing an instance of a type with a concrete behaviour where a using claused is used.</description>
    </item>
    
    <item>
      <title>Total functions and how they are useful to us</title>
      <link>http://notes.gbojinov.xyz/timeline/20210228225636-total-functions-and-how-they-are-useful-to-us/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210228225636-total-functions-and-how-they-are-useful-to-us/</guid>
      <description>Note Functions in programming are different from maths as they are a concrete implementation of something abstract, and thus have problems like how long they take to compute and whether they finish or hang. They have side effects as well. But FP mitigates some of these differences (e.g. pure functions), which allows us to talk about totality.
A total function terminates and returns an output value for every value of the input domain.</description>
    </item>
    
    <item>
      <title>Totality in functional programming</title>
      <link>http://notes.gbojinov.xyz/timeline/20210228222248-totality-in-functional-programming/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210228222248-totality-in-functional-programming/</guid>
      <description>Notes Total functions and how they are useful to us
Where can we introduce partiality in functions?
Achieving totality in functions
Resources https://kowainik.github.io/posts/totality</description>
    </item>
    
    <item>
      <title>Where can we introduce partiality in functions?</title>
      <link>http://notes.gbojinov.xyz/timeline/20210228225514-where-can-we-introduce-partiality-in-functions/</link>
      <pubDate>Sun, 28 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210228225514-where-can-we-introduce-partiality-in-functions/</guid>
      <description>Note A function that is not total, is partial. Yet again pertaining to Haskell, but is valid for other FP languages.
Where partiality can be introduced:
 Non-exhaustive pattern matching Missing conditions in guards Any pattern matching, basically Unspecified fields of records / structs / etc. Using bottom, e.g. error and undefined in Haskell Non-terminating loops Seg faults, and other low-level issues  Be careful when using wildcards, as adding new cases to types will lead to unexpected behaviour - prefer matching on all cases of a type instead when pattern matching.</description>
    </item>
    
    <item>
      <title>Basic resource management with Bracket in cats-effect - Scala tutorial</title>
      <link>http://notes.gbojinov.xyz/timeline/20210225233600-basic-resource-management-with-bracket-in-cats-effect-scala-tutorial/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210225233600-basic-resource-management-with-bracket-in-cats-effect-scala-tutorial/</guid>
      <description>Notes Functional Resource Management with Bracket
Resources https://www.youtube.com/watch?v=vsJz-fdEsd4</description>
    </item>
    
    <item>
      <title>Functional Resource Management with Bracket</title>
      <link>http://notes.gbojinov.xyz/timeline/20210225233738-functional-resource-management-with-bracket/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210225233738-functional-resource-management-with-bracket/</guid>
      <description>Note A problem when acquiring resources for use in applications (opening files, database connections, http connections) is closing them even when the operation fails. Imperative programs have try,catch,finally for this, but what does Cats Effect have in the functional world? It has Bracket. It&amp;rsquo;s a type class that can have an instance for a custom type, it is also defined for IO by default.
Some of its usages are as follows.</description>
    </item>
    
    <item>
      <title>Parallel typeclass pattern</title>
      <link>http://notes.gbojinov.xyz/timeline/20210225232633-parallel-typeclass-pattern/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210225232633-parallel-typeclass-pattern/</guid>
      <description>Note The Parallel typeclass is an abstraction over the conversion between an Applicative and a Monad, e.g. when we want to do certain operations in parallel with an applicative instance, but then convert back to the monad to use a for comprehension.
An example of it would be a conversion between Validated and Either, e.g. an Either with a List of errors as the Left. Another example is IO and ParIO.</description>
    </item>
    
    <item>
      <title>The Parallel typeclass in Cats - Scala tutorial</title>
      <link>http://notes.gbojinov.xyz/timeline/20210225232120-the-parallel-typeclass-in-cats-scala-tutorial/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210225232120-the-parallel-typeclass-in-cats-scala-tutorial/</guid>
      <description>Notes Parallel typeclass pattern
Resources https://www.youtube.com/watch?v=Tx5LdRCaDcY</description>
    </item>
    
    <item>
      <title>Calming yourself by focusing on the sensations of the body</title>
      <link>http://notes.gbojinov.xyz/timeline/20210221123134-calming-yourself-by-focusing-on-the-sensations-of-the-body/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210221123134-calming-yourself-by-focusing-on-the-sensations-of-the-body/</guid>
      <description>Notes Take a break from your brain by focusing on the body
Resources https://oldpodcast.com/</description>
    </item>
    
    <item>
      <title>Have a to don&#39;t list</title>
      <link>http://notes.gbojinov.xyz/timeline/20210221124251-have-a-to-don-t-list/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210221124251-have-a-to-don-t-list/</guid>
      <description>Notes Keep track of what you don&amp;rsquo;t want to do as well
Resources https://oldpodcast.com/ https://theartofsimple.net/to-dont-do/</description>
    </item>
    
    <item>
      <title>Keep track of what you don&#39;t want to do as well</title>
      <link>http://notes.gbojinov.xyz/timeline/20210221124411-keep-track-of-what-you-don-t-want-to-do-as-well/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210221124411-keep-track-of-what-you-don-t-want-to-do-as-well/</guid>
      <description>Note An important way to free our mind of clutter is writing down explicitly what we&amp;rsquo;re not going to do, also known as the the to don&amp;rsquo;t list. It can capture things like tasks you&amp;rsquo;ve been putting off for a long time, or simply something that you don&amp;rsquo;t feel will bring you value, but you are doing just to feel a sense of being productive. Crossing stuff off the to don&amp;rsquo;t list can be just as fulfilling as the to do, because it&amp;rsquo;s a feeling of taking control of your life and making choices, as well as having time to &amp;ldquo;stop and smell the roses&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Ponderings on confidence</title>
      <link>http://notes.gbojinov.xyz/timeline/20210221141606-ponderings-on-confidence/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210221141606-ponderings-on-confidence/</guid>
      <description>Notes The initial definition of confidence We might not need confidence to begin The mind can be our most valuable asset and our greatest enemy Small and big goal steps
Resources Daily journaling</description>
    </item>
    
    <item>
      <title>Small and big goal steps</title>
      <link>http://notes.gbojinov.xyz/timeline/20210221144811-small-and-big-goal-steps/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210221144811-small-and-big-goal-steps/</guid>
      <description>Note Appreciate your smaller goals and smaller victories on the way to the bigger ones, while keeping in mind the bigger goal always of course.
Links to this note  Ponderings on Confidence   The initial definition of confidence We might not need confidence to begin The mind can be our most valuable asset and our greatest enemy Small and big goal steps
 </description>
    </item>
    
    <item>
      <title>Take a break from your brain by focusing on the body</title>
      <link>http://notes.gbojinov.xyz/timeline/20210221123440-take-a-break-from-your-brain-by-focusing-on-the-body/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210221123440-take-a-break-from-your-brain-by-focusing-on-the-body/</guid>
      <description>Note When you find yourself consumed by worry, either by something happening in your life, or while watching a movie, a great mindfulness technique is to focus on the sensations of the body at that moment, to &amp;ldquo;give your brain a break&amp;rdquo; from itself and moving your thoughts to a sensory level. I have found myself doing that in meetings for example when i&amp;rsquo;m feeling anxiety. Haven&amp;rsquo;t tried it with horror movies as well as was advertised, but it could work there as well.</description>
    </item>
    
    <item>
      <title>The initial definition of confidence</title>
      <link>http://notes.gbojinov.xyz/timeline/20210221144422-the-initial-definition-of-confidence/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210221144422-the-initial-definition-of-confidence/</guid>
      <description>Note Confidence. It&amp;rsquo;s a finicky thing, isn&amp;rsquo;t it? Do we have it, do we not, how important is it? They say that in order to be successful in life you need confidence, you need to be sure of yourself and perform every action with the knowledge that you can and will succeed.
But wait a minute. That&amp;rsquo;s all great stuff, but we fail to notice one thing - confidence is not something you&amp;rsquo;re born with, well at least most of us aren&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>The mind can be our most valuable asset and our greatest enemy</title>
      <link>http://notes.gbojinov.xyz/timeline/20210221144138-the-mind-can-be-our-most-valuable-asset-and-our-greatest-enemy/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210221144138-the-mind-can-be-our-most-valuable-asset-and-our-greatest-enemy/</guid>
      <description>Note The mind is our most valuable asset. But it also can be our biggest enemy. It&amp;rsquo;s ironic. If we learn to condition it, to calm it, to control it to focus on the positive and the drive to improve ourselves, we can go a long way to making our life better. Letting the bad thoughts float past us, because that&amp;rsquo;s what they are - fleeting. We have lived out so many terrible things in our heads that will never come to pass.</description>
    </item>
    
    <item>
      <title>We might not need confidence to begin</title>
      <link>http://notes.gbojinov.xyz/timeline/20210221142908-we-might-not-need-confidence-to-begin/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210221142908-we-might-not-need-confidence-to-begin/</guid>
      <description>Note We might not need this thing called confidence. But rather we need to condition our minds, to help them realize two things - life is short, and you don&amp;rsquo;t have that much to lose that you can afford to attribute every lack of action to lack of confidence. It&amp;rsquo;s a vicious circle of sorts - you can&amp;rsquo;t perform actions without confidence, you can&amp;rsquo;t get confidence without performing successful actions. So why don&amp;rsquo;t we just eliminate the middle man?</description>
    </item>
    
    <item>
      <title>Create a productivity habit with a fixed days challenge</title>
      <link>http://notes.gbojinov.xyz/timeline/20210217232706-create-a-productivity-habit-with-a-fixed-days-challenge/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210217232706-create-a-productivity-habit-with-a-fixed-days-challenge/</guid>
      <description>Note To create a lasting habit for a productivity (or any habit, for that matter), you can start with an X day challenge to do the habit - that way you have the opportunity to see how the habit fits in to your regular routine and adapt it / change it.
Links to this note  How to USE Productivity Advice (Instead of Just Consuming It)   A couple of ideas:</description>
    </item>
    
    <item>
      <title>How to Get More Done and Waste Less Time</title>
      <link>http://notes.gbojinov.xyz/timeline/20210217231426-how-to-get-more-done-and-waste-less-time/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210217231426-how-to-get-more-done-and-waste-less-time/</guid>
      <description>Notes Prioritise tasks with the Eisenhower matrix
Resources Link</description>
    </item>
    
    <item>
      <title>How to USE Productivity Advice (Instead of Just Consuming It)</title>
      <link>http://notes.gbojinov.xyz/timeline/20210217232135-how-to-use-productivity-advice-instead-of-just-consuming-it/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210217232135-how-to-use-productivity-advice-instead-of-just-consuming-it/</guid>
      <description>Notes A couple of ideas:
 Prioritise tasks with the Eisenhower matrix Start with other people&amp;rsquo;s systems Create a productivity habit with a fixed days challenge Think about whether what you&amp;rsquo;re doing is actually getting you to the goal or not  Resources Link</description>
    </item>
    
    <item>
      <title>Languages are tools</title>
      <link>http://notes.gbojinov.xyz/timeline/20210217225610-languages-are-tools/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210217225610-languages-are-tools/</guid>
      <description>Note When speaking to somebody, don&amp;rsquo;t focus on yourself and how you might screw up language-wise or grammar-wise, focus on the person you&amp;rsquo;re speaking to and the goal you want to achieve. A language is a tool, used to get what you want and get stuff done. If your confidence becomes shaky the other person might misinterpret that and think it&amp;rsquo;s because you can&amp;rsquo;t get the job done.
Links to this note  Learning a Language?</description>
    </item>
    
    <item>
      <title>Learning a language? Speak it like you’re playing a video game | Marianna Pascal | TEDxPenangRoad</title>
      <link>http://notes.gbojinov.xyz/timeline/20210217230530-learning-a-language-speak-it-like-you-re-playing-a-video-game-marianna-pascal-tedxpenangroad/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210217230530-learning-a-language-speak-it-like-you-re-playing-a-video-game-marianna-pascal-tedxpenangroad/</guid>
      <description>Notes Languages are tools
Resources Ted talk</description>
    </item>
    
    <item>
      <title>Prioritise tasks with the Eisenhower matrix</title>
      <link>http://notes.gbojinov.xyz/timeline/20210217231643-prioritise-tasks-with-the-eisenhower-matrix/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210217231643-prioritise-tasks-with-the-eisenhower-matrix/</guid>
      <description>Note The Eisenhower matrix for organising your day/week/month This is based off the idea of prioritisation of tasks - it has four quadrants:
 Important and urgent tasks - do them right away Important but not urgent tasks - schedule them for later but still so them Not important but urgent - delegate OR automate them somehow Not important and not urgent - annihilate them, time wasters are here  Links to this note  How to USE Productivity Advice (Instead of Just Consuming It)   A couple of ideas:</description>
    </item>
    
    <item>
      <title>Start with other people&#39;s systems</title>
      <link>http://notes.gbojinov.xyz/timeline/20210217232332-start-with-other-people-s-systems/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210217232332-start-with-other-people-s-systems/</guid>
      <description>Note When starting out with a productivity practice, it can be very useful to follow someone else&amp;rsquo;s system and then adapt it to work for you. Takes off the pressure of coming up with a solution from scratch and frankly, wasting the mental energy to reinvent the wheel and it allows you to build upon something existing.
Links to this note  How to USE Productivity Advice (Instead of Just Consuming It)   A couple of ideas:</description>
    </item>
    
    <item>
      <title>Index</title>
      <link>http://notes.gbojinov.xyz/timeline/20210120223526-index/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0200</pubDate>
      
      <guid>http://notes.gbojinov.xyz/timeline/20210120223526-index/</guid>
      <description>Hello there! Welcome to my knowledge base!
Here&amp;rsquo;s something interesting:
This will eventually have permanent notes in it that I believe are interesting.</description>
    </item>
    
  </channel>
</rss>
